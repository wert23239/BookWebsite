// prisma/schema.prisma
// Include your generator and datasource blocks here
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id             String       @id @default(cuid())
  name           String?
  email          String       @unique
  emailVerified  DateTime?     @map("email_verified")
  verificationToken String?   @map("verification_token")
  password       String
  image          String?
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  accounts       Account[]
  sessions       Session[]
  userPages      UserPage[]

  @@map("users")
}

model Page {
  id            Int         @id @default(autoincrement())
  chapterNumber Int         @map("chapter_number")
  variant       String
  title         String
  description   String?
  filePath      String      @map("file_path")
  rarity        String
  type          String
  createdAt     DateTime    @default(now()) @map("created_at")
  userPages     UserPage[]

  @@map("pages")
}

model UserPage {
  id               Int      @id @default(autoincrement())
  userId           String   @map("user_id")
  pageId           Int      @map("page_id")
  acquiredAt       DateTime @default(now()) @map("acquired_at")
  acquisitionMethod String  @map("acquisition_method")
  user             User     @relation(fields: [userId], references: [id])
  page             Page     @relation(fields: [pageId], references: [id])

  @@unique([userId, pageId])
  @@map("user_pages")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
